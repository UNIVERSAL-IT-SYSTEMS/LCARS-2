@import "lcars-loop.less";

.generate-name-i-n(column, 24, {
    height: 100%;
    width: (@i * 100% / @n) - @column-padding-right - @column-padding-left;

    margin-left: @column-padding-left;
    margin-right: @column-padding-right;

    float: left;

    overflow: hidden;
});

.lcars-column-inner(@shoulderCount) {
    .lcars-column-inner-@{shoulderCount} {
        width: 100% - @elbow-cutout-width;

        float: left;
        clear: both;

        position: relative;

        overflow: hidden;

        border-top: @column-padding-vertical solid;
        border-bottom: @column-padding-vertical solid;
        border-color: @background;

        //HACK: When pixel height == 100% of parent height, things break. Since window cannot ever be ~.1 units high, this fixes that!
        height: calc(~"100% - " unit(@elbow-height * @shoulderCount + 0.1 + (2 * @column-padding-vertical), px));
        min-height: 0;

        .lcars-column-filler() {
            &:before {
                content: "";

                float: left;
                clear: both;
                position: absolute;

                width: 100% - @elbow-cutout-width;
                height: 100%;

                background-color: cornflowerblue;
            }
        }

        .lcars-left > & {
            padding-right: @elbow-cutout-width;
            float: left;

            .lcars-column-filler();
        }

        .lcars-center > & {
            height: calc(~"100% - " unit(@center-elbow-height * @shoulderCount + (2 * @column-padding-vertical), px));
            min-height: @elbow-height * @shoulderCount - @center-elbow-height * @shoulderCount;

            width: 100%;
        }

        .lcars-right > & {
            padding-left: @elbow-cutout-width;
            float: right;

            .lcars-column-filler();
        }
    }
}

.lcars-column-inner(0);
.lcars-column-inner(1);
.lcars-column-inner(2);

.lcars-center {
    float: left;
}
